class DSU{
    public:
    vector<int>parent,size;
    DSU(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }
    int findUlp(int node){
        if(parent[node]==node)return node;
        return parent[node]=findUlp(parent[node]);
    }
    void unionBySize(int u,int v){
        int parU=findUlp(u);
        int parV=findUlp(v);
        if(parU==parV)return;
        if(size[parU]>size[parV]){
            size[parU]+=size[parV];
            parent[parV]=parU;
        }else{
            size[parV]+=size[parU];
            parent[parU]=parV;
        }
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        unordered_map<int,int>mp,freqPar;
        for(int i=0;i<initial.size();i++){
           mp[initial[i]]=1;
        }
        DSU ds(n);
        for(int i=0;i<n;i++){
            if(mp.find(i)==mp.end()){
                for(int j=0;j<n;j++){
                    if(mp.find(j)==mp.end()&&i!=j&&graph[i][j]){
                        ds.unionBySize(i,j);
                    }
                }
            }
        }
        sort(initial.begin(),initial.end());
        for(int i=0;i<initial.size();i++){
            unordered_set<int>st;
             for(int j=0;j<n;j++){
                if(j!=initial[i]&&mp.find(j)==mp.end()&&graph[initial[i]][j]){
                    st.insert(ds.findUlp(j));
                }
             }
             for(auto val:st)
             freqPar[val]++;
        }
        int ans=0,score=0;
         for(int i=0;i<initial.size();i++){
            int tempScore=0;unordered_set<int>st;
             for(int j=0;j<n;j++){
                if(j!=initial[i]&&mp.find(j)==mp.end()&&graph[initial[i]][j]){
                    if(freqPar[ds.findUlp(j)]==1){
                     st.insert(ds.findUlp(j));
                    }
                }
             }
             for(auto j:st)
             tempScore+=ds.size[j];
             if(score<tempScore)
             {
                ans=i;
               
                score=tempScore;
             }
        }
 
        return initial[ans];

    }
};